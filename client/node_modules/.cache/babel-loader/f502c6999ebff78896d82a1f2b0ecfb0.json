{"ast":null,"code":"var _jsxFileName = \"/Users/luanakimley/nodejs-projects/ecommerce-web-app/client/src/components/AdminDashboard/AllPurchases.jsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { ACCESS_LEVEL_ADMIN, SERVER_HOST } from \"../../config/global_constants\";\nimport PurchasesRow from \"./AllPurchasesRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllPurchases extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      orders: []\n    };\n  }\n\n  componentDidMount() {\n    axios.defaults.withCredentials = true;\n    if (localStorage.accessLevel === parseInt(ACCESS_LEVEL_ADMIN)) axios.get(`${SERVER_HOST}/orders`, {\n      headers: {\n        authorization: localStorage.token\n      }\n    }).then(res => {\n      if (res.data) {\n        if (res.data.errorMessage) {\n          console.log(res.data.errorMessage);\n        } else {\n          console.log(\"Orders record read\");\n          this.setState({\n            orders: res.data\n          });\n        }\n      } else {\n        console.log(\"Orders record not found\");\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.orders !== undefined ? this.state.orders.map(order => /*#__PURE__*/_jsxDEV(PurchasesRow, {\n        order: order\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 46\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AllPurchases;","map":{"version":3,"sources":["/Users/luanakimley/nodejs-projects/ecommerce-web-app/client/src/components/AdminDashboard/AllPurchases.jsx"],"names":["React","axios","ACCESS_LEVEL_ADMIN","SERVER_HOST","PurchasesRow","AllPurchases","Component","constructor","props","state","orders","componentDidMount","defaults","withCredentials","localStorage","accessLevel","parseInt","get","headers","authorization","token","then","res","data","errorMessage","console","log","setState","render","undefined","map","order"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,+BAAhD;AACA,OAAOC,YAAP,MAAyB,mBAAzB;;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAGD;;AACDC,EAAAA,iBAAiB,GAAG;AAClBV,IAAAA,KAAK,CAACW,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AAEA,QAAGC,YAAY,CAACC,WAAb,KAA6BC,QAAQ,CAACd,kBAAD,CAAxC,EACAD,KAAK,CACFgB,GADH,CACQ,GAAEd,WAAY,SADtB,EACgC;AAC5Be,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEL,YAAY,CAACM;AAA9B;AADmB,KADhC,EAIGC,IAJH,CAISC,GAAD,IAAS;AACb,UAAIA,GAAG,CAACC,IAAR,EAAc;AACZ,YAAID,GAAG,CAACC,IAAJ,CAASC,YAAb,EAA2B;AACzBC,UAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACC,IAAJ,CAASC,YAArB;AACD,SAFD,MAEO;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,eAAKC,QAAL,CAAc;AAAEjB,YAAAA,MAAM,EAAEY,GAAG,CAACC;AAAd,WAAd;AACD;AACF,OAPD,MAOO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;AACF,KAfH;AAgBD;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,gBACG,KAAKnB,KAAL,CAAWC,MAAX,KAAsBmB,SAAtB,GACG,KAAKpB,KAAL,CAAWC,MAAX,CAAkBoB,GAAlB,CAAuBC,KAAD,iBAAW,QAAC,YAAD;AAAc,QAAA,KAAK,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,cAAjC,CADH,GAEG;AAHN;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AArCwC;;AAwC3C,eAAe1B,YAAf","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { ACCESS_LEVEL_ADMIN, SERVER_HOST } from \"../../config/global_constants\";\nimport PurchasesRow from \"./AllPurchasesRow\";\n\nclass AllPurchases extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      orders: [],\n    };\n  }\n  componentDidMount() {\n    axios.defaults.withCredentials = true;\n\n    if(localStorage.accessLevel === parseInt(ACCESS_LEVEL_ADMIN))\n    axios\n      .get(`${SERVER_HOST}/orders`, {\n        headers: { authorization: localStorage.token },\n      })\n      .then((res) => {\n        if (res.data) {\n          if (res.data.errorMessage) {\n            console.log(res.data.errorMessage);\n          } else {\n            console.log(\"Orders record read\");\n            this.setState({ orders: res.data });\n          }\n        } else {\n          console.log(\"Orders record not found\");\n        }\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.orders !== undefined\n          ? this.state.orders.map((order) => <PurchasesRow order={order} />)\n          : null}\n      </div>\n    );\n  }\n}\n\nexport default AllPurchases;\n"]},"metadata":{},"sourceType":"module"}